name: iOS parallel test workflow

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build default scheme
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        id: set_scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "scheme=$default" >> $GITHUB_OUTPUT
      - name: Import Apple Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.P12_BASE64_CERTIFICATE }}
          p12-password: ${{ secrets.P12_PASSWORD }}
      - name: Build for Testing
        env:
          scheme: ${{ steps.set_scheme.outputs.scheme }}
          platform: 'iOS Simulator'
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -derivedDataPath './DerivedData'
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-app
          path: DerivedData/Build/Products/
          retention-days: 1

  test:
    needs: build
    name: Test on ${{ matrix.device }}
    runs-on: macos-latest
    strategy:
      matrix:
        device: [ 'iPhone 16 Pro', 'iPad Pro 13-inch (M4)' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        id: set_scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "scheme=$default" >> $GITHUB_OUTPUT
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: built-app
          path: DerivedData/Build/Products/
      - name: Display structure of downloaded files
        run: ls -R DerivedData/Build/Products/
      - name: Run Tests
        env:
          scheme: ${{ steps.set_scheme.outputs.scheme }}
          platform: 'iOS Simulator'
          device_name: ${{ matrix.device }}
        run: |
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device_name" -derivedDataPath 'DerivedData'
